name: CI/CD Pipeline

#  •	push 이벤트는 main 브랜치에 푸시가 될 때 CI/CD 파이프라인을 트리거
#  •	pull_request 이벤트는 main 브랜치에 대한 풀 리퀘스트가 있을 때 트리거
#  •	schedule 은 매 5일마다 파이프라인이 자동으로 실행되도록 설정.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 */5 * *'


#  •	리포지토리 코드를 체크아웃하고 Docker 이미지를 빌드한 다음, Docker Hub에 푸시.
#  •	캐시를 사용하여 빌드 속도를 최적화하고, 캐시를 관리하는 부분이 포함되어 있어.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            boram0415/back-end-app:latest
            boram0415/back-end-app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          else
            echo "Warning: Cache not found. Skipping cache move."
          fi
#  •	EC2 서버로 SSH 접속 후 Docker Compose 명령어를 사용하여 새로운 이미지를 배포.
#  •	docker-compose pull을 사용하여 새 이미지를 가져오고, docker-compose up -d로 컨테이너를 백그라운드에서 실행.
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo su -c "cd /root/Back-end && docker-compose pull && docker-compose --env-file .env up -d"

#  배포 후 서버에서 사용하지 않는 Docker 컨테이너, 볼륨, 이미지, 네트워크를 정리하여 서버의 리소스를 관리.
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Clean up old Docker images, containers, and volumes
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu  # 'ubuntu' 사용자로 로그인
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker container prune -f
            sudo docker volume prune -f
            sudo docker image prune -af --filter "until=120h"
            sudo docker network prune -f
            sudo docker system prune -af